//
//  9.swift
//  Questions
//
//  Created by admin1 on 1.06.23.
//

import Foundation

/*
 Итак, диспетчеризация метода — это то, как программа будет определять, какие инструменты использовать при вызове функции.
 Диспетчеризация широко используется, знание этого механизма поможет выйти из запутанных ситуаций.
 
 Swift поддерживает три типа диспетчеризации:
  Direct Dispatch (Статическая диспетчеризация) — самый быстрый тип диспетчеризации. Адрес вызываемой функции определяется
  во время компиляции, поэтому затраты на такие вызовы минимальны. Для использования статической диспетчеризации вы можете
  пометить методы ключевым словом private или классы ключевым словом final.
 
  Table Dispatch (Динамическая диспетчеризация) — распространенный тип. Адрес вызываемой функции определяется
  во время выполнения. У каждого подкласса есть собственная таблица с указателем на функцию для каждого метода.
  По мере того как подклассы добавляют к классу новые методы, эти методы добавляются в конец этой таблицы.
  Затем к таблице обращаются во время выполнения, чтобы определить метод для выполнения. Это и есть динамическая диспетчеризация.
  В Swift данный подтип делится на два подтипа:
  Virtual Table — используется при наследовании классов, что приносит дополнительные затраты.
  Witness Table — используется для реализации протоколов, наследование отсутствует.
 
  Message Dispatch (Отправка сообщений) — самый долгий (по времени выполнения) тип диспетчеризации.
  Обеспечивает работу таких механизмов, как KVC/KVO или Core Data. Главная особенность этого
  типа —  у разработчиков появляется возможность изменять поведение отправки во время выполнения
  с помощью механизма swizzling.
 */
